{"version":3,"sources":["content/fontawesome.js","content/content.js","content/Toggle.js","content/DarkModeToggle.js","App.js","serviceWorker.js","index.js"],"names":["library","add","faGithubSquare","faGoogle","faInstagramSquare","faFacebookSquare","faTwitterSquare","faReact","faGithub","faInstagram","faFacebook","faTwitter","Content","className","src","crossorigin","icon","size","content","href","target","rel","data-tippy-content","Toggle","checked","onChange","type","id","htmlFor","DarkModeToggle","darkMode","useDarkMode","onClick","disable","value","toggle","enable","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAeAA,EAAQC,IACNC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,K,WCwCaC,G,MArDC,kBACZ,kBAAC,WAAD,KACE,yBAAKC,UAAU,WACf,4BAAQC,IAAI,4CAA4CC,YAAY,cACpE,4BAAQD,IAAI,uCACZ,4BAAQA,IAAI,iCAEV,yBAAKD,UAAU,OACb,4BAAQA,UAAU,eAChB,yBAAKA,UAAU,WAEb,kBAAC,IAAD,CAAiBG,KAAMT,IAASU,KAAK,KAAKJ,UAAU,eACpD,2CAGA,yDAMA,wBAAIA,UAAU,aAEd,kBAAC,IAAD,CAAOK,QAAQ,eACb,uBAAGL,UAAU,aAAaM,KAAK,kCAAkCC,OAAO,SAASC,IAAI,sBAAsBC,qBAAmB,eAC5H,kBAAC,IAAD,CAAiBN,KAAMN,IAAYO,KAAK,SAG5C,kBAAC,IAAD,CAAOC,QAAQ,eACb,uBAAGL,UAAU,aAAaM,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAClF,kBAAC,IAAD,CAAiBL,KAAML,IAAWM,KAAK,SAG3C,kBAAC,IAAD,CAAOC,QAAQ,WACb,uBAAGL,UAAU,aAAaM,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAC7E,kBAAC,IAAD,CAAiBL,KAAMR,IAAUS,KAAK,SAG1C,kBAAC,IAAD,CAAOC,QAAQ,eACb,uBAAGL,UAAU,aAAaM,KAAK,mCAAmCC,OAAO,SAASC,IAAI,uBACpF,kBAAC,IAAD,CAAiBL,KAAMP,IAAaQ,KAAK,iBCrC5CM,EAbA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,SAAZ,OACb,0BAAMZ,UAAU,kBACd,2BACEA,UAAU,UACVa,KAAK,WACLF,QAASA,EACTC,SAAUA,EACVE,GAAG,YAEL,2BAAOC,QAAQ,c,QCUJC,EAhBQ,WACrB,IAAMC,EAAWC,aAAY,GAE7B,OACE,yBAAKlB,UAAU,oBACb,4BAAQa,KAAK,SAASM,QAASF,EAASG,SAAxC,UAGA,kBAAC,EAAD,CAAQT,QAASM,EAASI,MAAOT,SAAUK,EAASK,SACpD,4BAAQT,KAAK,SAASM,QAASF,EAASM,QAAxC,Y,MCISC,MAXf,WACE,OACE,oCACA,yBAAKxB,UAAU,UACb,kBAAC,EAAD,OAEF,kBAAC,EAAD,QCDgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.42425b51.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core';\r\n\r\nimport {\r\n  faGithubSquare,\r\n  faGoogle,\r\n  faInstagramSquare,\r\n  faFacebookSquare,\r\n  faTwitterSquare,\r\n  faReact,\r\n  faGithub,\r\n  faInstagram,\r\n  faFacebook,\r\n  faTwitter,\r\n} from '@fortawesome/free-brands-svg-icons';\r\n\r\nlibrary.add(\r\n  faGithubSquare,\r\n  faGoogle,\r\n  faInstagramSquare,\r\n  faFacebookSquare,\r\n  faTwitterSquare,\r\n  faReact,\r\n  faGithub,\r\n  faInstagram,\r\n  faFacebook,\r\n  faTwitter,\r\n);","import React, { Fragment } from 'react';\r\n// import logo from 'logo.svg';\r\n\r\n\r\nimport { faTwitterSquare, faFacebookSquare, faGithubSquare, faInstagramSquare, faReact,  faTwitter, faFacebook, faGithub, faInstagram } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nimport './fontawesome';\r\n\r\nimport Tippy from '@tippyjs/react';\r\nimport 'tippy.js/dist/tippy.css';\r\n\r\nconst Content = () => (\r\n    <Fragment>\r\n      <div className=\"content\">\r\n      <script src=\"https://kit.fontawesome.com/36f73a74bd.js\" crossorigin=\"anonymous\"></script>\r\n      <script src=\"https://unpkg.com/@popperjs/core@2\"></script>\r\n      <script src=\"https://unpkg.com/tippy.js@6\"></script>\r\n      \r\n        <div className=\"App\">\r\n          <header className=\"mainContent\">\r\n            <div className=\"mainBox\">\r\n              {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n              <FontAwesomeIcon icon={faReact} size=\"5x\" className=\"react-logo\"/>\r\n              <h1>\r\n                HAZIQ HAPIZ\r\n              </h1>\r\n              <p>\r\n                Amateur Software Developer\r\n              </p>\r\n\r\n              {/* icon list */}\r\n              \r\n              <li className=\"logo-list\">\r\n\r\n              <Tippy content=\"@haziqhapiz\">\r\n                <a className=\"brand-icon\" href=\"https://facebook.com/haziqhapiz\" target=\"_blank\" rel=\"noopener noreferrer\" data-tippy-content=\"@haziqhapiz\"> \r\n                  <FontAwesomeIcon icon={faFacebook} size=\"2x\"/>\r\n                </a>\r\n              </Tippy>\r\n              <Tippy content=\"@haziqhapiz\">\r\n                <a className=\"brand-icon\" href=\"https://twitter.com/haziqhapiz\" target=\"_blank\" rel=\"noopener noreferrer\"> \r\n                  <FontAwesomeIcon icon={faTwitter} size=\"2x\" />\r\n                </a>\r\n              </Tippy>\r\n              <Tippy content=\"@zyqhpz\">\r\n                <a className=\"brand-icon\" href=\"https://github.com/zyqhpz\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  <FontAwesomeIcon icon={faGithub} size=\"2x\" />\r\n                </a>\r\n              </Tippy>\r\n              <Tippy content=\"@haziqhapiz\">\r\n                <a className=\"brand-icon\" href=\"https://instagram.com/haziqhapiz\" target=\"_blank\" rel=\"noopener noreferrer\"> \r\n                  <FontAwesomeIcon icon={faInstagram} size=\"2x\" />\r\n                </a>\r\n              </Tippy>\r\n\r\n              </li>\r\n            </div>\r\n          </header>\r\n        </div>\r\n        </div>\r\n      </Fragment>\r\n)\r\n\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nconst Toggle = ({ checked, onChange }) => (\r\n  <span className=\"toggle-control\">\r\n    <input\r\n      className=\"dmcheck\"\r\n      type=\"checkbox\"\r\n      checked={checked}\r\n      onChange={onChange}\r\n      id=\"dmcheck\"\r\n    />\r\n    <label htmlFor=\"dmcheck\" />\r\n  </span>\r\n);\r\n\r\nexport default Toggle;","import React from 'react';\r\n\r\nimport Toggle from './Toggle';\r\nimport useDarkMode from 'use-dark-mode';\r\n\r\nconst DarkModeToggle = () => {\r\n  const darkMode = useDarkMode(false);\r\n\r\n  return (\r\n    <div className=\"dark-mode-toggle\">\r\n      <button type=\"button\" onClick={darkMode.disable}>\r\n        ☀\r\n      </button>\r\n      <Toggle checked={darkMode.value} onChange={darkMode.toggle} />\r\n      <button type=\"button\" onClick={darkMode.enable}>\r\n        ☾\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DarkModeToggle;\r\n","import React from 'react';\nimport Content from './content/content';\nimport DarkModeToggle from './content/DarkModeToggle';\n\nimport './style.scss';\n\n\nfunction App() {\n  return (\n    <>\n    <div className=\"navbar\"> \n      <DarkModeToggle/>\n    </div>\n    <Content/>\n    </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}